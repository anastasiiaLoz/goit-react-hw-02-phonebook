{"version":3,"sources":["Components/contactsForm/StyledContactsForm.js","Components/contactsForm/ContactsForm.js","Components/contactsList/StyledContactsList.js","Components/contactsList/ContactsList.js","Components/contactsSection/ContactsSection.js","Components/contactsFilter/StyledContactsFilter.js","Components/contactsFilter/ContactsFilter.js","Components/Contacts.js","Components/App.js","index.js"],"names":["StyledContactsForm","styled","form","ContactsForm","state","contacts","filter","name","number","onHandleSubmit","e","preventDefault","props","addContact","onCheckDuplicateName","setState","onHandleChange","target","value","onSubmit","this","placeholder","type","pattern","title","required","onChange","Component","StyledContactsList","div","ContactsList","deleteContact","map","contact","className","onClick","id","ContactsSection","children","styles","StyledFilterContainer","ContactsFilter","setFilter","Contacts","a","axios","post","data","prev","delete","some","alert","getFilteredContacts","toLowerCase","includes","get","Object","keys","key","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b1df1c57.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const StyledContactsForm = styled.form`\n    width:400px;\n    height: 250px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: flex-start;\n    border-color: black;\n    padding: 15px;\n    border-radius: 2px;\n    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 2px 1px -1px rgb(0 0 0 / 12%);\n    margin-bottom: 50px;\n    \ninput {\n    width: 100%;\n  padding: 12px 10px;\n  margin: 8px 0;\n  display: inline-block;\n  border-radius: 4px;\n  box-sizing: border-box;\n  border: 1px solid #ccc8c8;\n  transition: .3s border-color;\n    &:hover {\n  border: 1px solid #0f55eb;\n}\n}\ninput::placeholder {\n  color: rgba(0, 26, 255, 0.336);\n  font-size: 1em;\n  font-style: italic;\n}\n`","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { StyledContactsForm } from './StyledContactsForm.js'\n\n\nclass ContactsForm extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n    name: '',\n    number: ''\n  }\n\n  onHandleSubmit = e => {\n    e.preventDefault();\n    this.props.addContact(this.state);\n    this.props.onCheckDuplicateName(this.state.name);\n    this.setState({\n      contacts: [],\n      name: \"\",\n      filter: '',\n      number: \"\"\n    });\n  };\n\n\n  onHandleChange = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n\n  };\n\n  render() {\n    return (\n      <StyledContactsForm onSubmit={this.onHandleSubmit}>\n        <label>\n          Name\n          <input \n            placeholder=\"what's his/her name?\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={this.onHandleChange}\n            value={this.state.name}\n          />\n        </label>\n        <label>\n          Number\n          <input \n            placeholder=\"gimme their number, hun;)\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={this.onHandleChange}\n            value={this.state.number}\n          />\n        </label>\n        <button type=\"submit\">Add Contact</button>\n      </StyledContactsForm>\n    );\n  }\n}\n\nContactsForm.propTypes = {\n  onHandleSubmit: PropTypes.func,\n  name: PropTypes.string,\n  number: PropTypes.string,\n}.isRequired;\n\nexport default ContactsForm;\n","import styled from \"styled-components\"\n\nexport const StyledContactsList = styled.div`\n    width:400px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: flex-start;\n    border-color: black;\n    padding: 15px;\n    border-radius: 2px;\n    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 2px 1px -1px rgb(0 0 0 / 12%);\n    margin-top: 50px;\n\n.styled-contact-li{\n    display:flex;\n    align-items: center;\n    justify-content: space-between;\n}\n`","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { StyledContactsList } from \"./StyledContactsList\";\n\nconst ContactsList = ({ contacts, deleteContact }) => {\n  return (\n    <StyledContactsList>\n      <ul>\n        {contacts.map(contact => (\n          <li className=\"styled-contact-li\"\n              key={contact.id}>\n                <p>{contact.name}:</p>\n                <p>{contact.number}</p>\n                <button type=\"button\" onClick={deleteContact} id={ contact.id}>Delete</button>\n          </li>\n        ))}\n      </ul>\n    </StyledContactsList>\n  );\n};\n\nContactsList.propTypes = {\n    deleteContact: PropTypes.func.isRequired,\n    contacts: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string,\n        name: PropTypes.string,\n        number: PropTypes.string,\n    }).isRequired),\n}\n\n\nexport default ContactsList;\n","import React from 'react';\n\nconst ContactsSection = ({ title, children, styles}) => {\n    return (\n        <div className={styles}>\n            <h2>{title}</h2>\n            {children}\n        </div>\n    )\n}\n\nexport default ContactsSection;","import styled from 'styled-components'\n\nexport const StyledFilterContainer = styled.div`\n    width:400px;\n    height: 150px;\n    padding: 15px;\n    border-radius: 2px;\n    &:hover{\n        border: 1px solid #0f55eb;\n    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 2px 1px -1px rgb(0 0 0 / 12%);\n    background-color: rgba(0, 26, 255, 0.336);\n    }\n\ninput {\n    width: 100%;\n  padding: 12px 10px;\n  margin: 8px 0;\n  display: inline-block;\n  border-radius: 4px;\n  box-sizing: border-box;\n  border: 1px solid #ccc8c8;\n  transition: .3s border-color;\n  \n   \n}\ninput::placeholder {\n  color: rgba(0, 26, 255, 0.336);\n  font-size: 1em;\n  font-style: italic;\n}\n`","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport { StyledFilterContainer } from './StyledContactsFilter';\n\nconst ContactsFilter = ({ filter, setFilter}) => {\n    return (\n        <StyledFilterContainer>\n        <label>\n            <h3>Find contacts by name</h3>\n            <input className=\"filterInput\"\n                type=\"text\"\n                value={filter}\n                onChange={setFilter}\n                placeholder=\"who is your booty call for tonight? \"\n            />\n            </label>\n        </StyledFilterContainer>\n        \n    );\n}\n\nContactsFilter.propTypes = {\n    filter: PropTypes.string,\n    setFilter: PropTypes.func,\n}.isRequired;\n\n\nexport default ContactsFilter;","import React, { Component } from \"react\";\nimport ContactsForm from \"./contactsForm/ContactsForm\";\nimport ContactsList from \"./contactsList/ContactsList\";\nimport ContactsSection from \"./contactsSection/ContactsSection\";\nimport ContactsFilter from \"./contactsFilter/ContactsFilter\";\nimport axios from \"axios\"\n\n\nclass Contacts extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n    name: '',\n    number: ''\n  }\n\n\n  async componentDidMount() {\n    try {\n      const { data } = await axios.get(\n        `https://bootycall-phonebook-default-rtdb.firebaseio.com/contacts.json`\n      )\n      if (data) {\n        const contacts = Object.keys(data).map(key => ({ id: key, ...data[key] }))\n        this.setState({ contacts });\n      }\n    } catch (error) {\n\n    }\n  }\n\n  addContact = async (contact) => {\n    try {\n      const { data } = await axios.post(\n        `https://bootycall-phonebook-default-rtdb.firebaseio.com/contacts.json`,\n        contact\n      )\n      this.setState((prev) => {\n        return {\n          contacts: [...prev.contacts, {...contact, id: data.name}]\n        }\n      })\n    } catch (error) {\n      \n    }\n  };\n\n  deleteContact = async (e) => {\n    try {\n      const { id } = e.target\n      await axios.delete(\n        `https://bootycall-phonebook-default-rtdb.firebaseio.com/contacts/${id}.json`\n      );\n      this.setState({\n        contacts: this.state.contacts.filter(contact => contact.id !== id)\n      })\n    } catch (error) {\n    }\n  }\n\n  onCheckDuplicateName = (name) => {\n    const isDuplicate = this.state.contacts.some((contact) => contact.name === name)\n    if (isDuplicate) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n  }\n\n  setFilter = (e) => {\n    const { value } = e.target;\n    this.setState({\n      filter: value\n    })\n  }\n\n  getFilteredContacts = () => {\n    return this.state.contacts.filter(contact => contact.name.toLowerCase().includes(this.state.filter.toLowerCase()))\n  };\n\n\n  render() {\n    return (\n      <>\n        <ContactsSection title=\"Phonebook\">\n            <ContactsForm addContact={this.addContact} onCheckDuplicateName={this.onCheckDuplicateName} />\n        </ContactsSection>\n\n        <ContactsSection title=\"Contacts\" styles=\"filterContainerStyle\">\n          <ContactsFilter filter={this.state.filter} setFilter={this.setFilter} />\n        </ContactsSection>\n        \n        <ContactsSection>\n          <ContactsList contacts={this.getFilteredContacts()} deleteContact={this.deleteContact} />\n          </ContactsSection>\n    </>\n    );\n  }\n}\n\nexport default Contacts;\n","import React from \"react\";\nimport Contacts from \"./Contacts\";\n\nconst App = () => {\n  return (\n    <>\n      <Contacts />\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}